!function(){"use strict";class e{constructor(e,t,r,s,n,i){let{name:o,link:a,_id:l,isLiked:c}=e;this._name=o,this._link=a,this._id=l,this._isLiked=c,this._cardSelector=t,this._clickHandler=r,this._deletePopup=s,this._handleDelete=n,this._handleLike=i}getId(){return this._id}_setEventListeners(){this._cardElement.querySelector(".card__button-like").addEventListener("click",(()=>{this._handleLike()})),this._cardElement.querySelector(".card__button-delete").addEventListener("click",(()=>{this._handleDelete()})),this._cardImageElement.addEventListener("click",(()=>{this._clickHandler({name:this._name,link:this._link})}))}likeHandler(){this._cardElement.querySelector(".card__button-like").classList.toggle("card__button-like_active")}deleteHandler(){this._cardElement.remove(),this._cardElement=null}getNewCard(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._cardImageElement.alt=this._name,this._cardImageElement.src=this._link,this._cardTitleElement.textContent=this._name,this._isLiked&&this._cardElement.querySelector(".card__button-like").classList.add("card__button-like_active"),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){this._formElement.querySelector(`#${e.id}-error`).textContent=e.validationMessage,e.classList.add(this._errorClass)}_hideInputError(e){this._formElement.querySelector(`#${e.id}-error`).textContent=e.validationMessage,e.classList.remove(this._errorClass)}_checkValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_changeButtonState(){let e=!1;this._inputElements.forEach((t=>{t.validity.valid||(e=!0)})),e?this._disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkValidity(e),this._changeButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&(e.preventDefault(),this.close())};setEventListeners(){this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class s extends r{constructor(e,t,r){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitType=r,this._submitBtn=this._popupElement.querySelector(".modal__button")}getInputValues(){return Array.from(this._popupForm.querySelectorAll(".modal__input")).reduce(((e,t)=>({...e,[t.name]:t.value})),{})}close(){this._popupForm.reset(),super.close()}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this.getInputValues())})),super.setEventListeners()}loadingButtonState(){this._submitBtn.textContent="Saving..."}resetButtonState(){this._submitBtn.textContent=`${this._submitType}`}}const n=document.querySelector(".cards__list"),i=(document.querySelector("#profile-name"),document.querySelector("#profile-about"),document.querySelector("#profile-avatar"),document.querySelector("#profile-picture-edit-btn")),o=document.querySelector("#profile-picture-form"),a=document.querySelector("#profile-picture-submit-btn"),l=(document.querySelector("#profile-picture-input"),document.querySelector("#profile-edit-btn")),c=document.querySelector("#profile-edit-form"),d=document.querySelector("#profile-title-input"),u=document.querySelector("#profile-description-input"),h=document.querySelector("#profile-add-btn"),_=document.querySelector("#profile-add-modal"),m=document.querySelector("#add-card-btn"),p=_.querySelector("#card-add-form"),E=(p.querySelector("#profile-add-title-input"),p.querySelector("#profile-add-url-input"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__error",errorClass:"modal__error_visible"}),f={baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"97f6b443-08dd-4f1c-9189-025b318b185d","Content-Type":"application/json"}},b=new class{constructor(){this._baseUrl=f.baseUrl,this._baseHeaders=f.headers,this._userPath=`${this._baseUrl}/users/me`,this._cardPath=`${this._baseUrl}/cards`}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}logError(e){console.error(e)}returnPromises(e){let[t,r]=e;return Promise.all([t,r])}getInitialCards(){return fetch(this._cardPath,{method:"GET",headers:this._baseHeaders}).then((e=>this._checkResponse(e)))}addNewCard(e){let{name:t,link:r}=e;return fetch(this._cardPath,{method:"POST",headers:this._baseHeaders,body:JSON.stringify({name:t,link:r})}).then((e=>this._checkResponse(e)))}deleteCard(e){return fetch(`${this._cardPath}/${e}`,{method:"DELETE",headers:this._baseHeaders}).then((e=>this._checkResponse(e)))}addCardLike(e){return fetch(`${this._cardPath}/${e}/likes`,{method:"PUT",headers:this._baseHeaders}).then((e=>this._checkResponse(e)))}removeCardLike(e){return fetch(`${this._cardPath}/${e}/likes`,{method:"DELETE",headers:this._baseHeaders}).then((e=>this._checkResponse(e)))}getUserInfo(){return fetch(this._userPath,{method:"GET",headers:this._baseHeaders}).then((e=>this._checkResponse(e)))}setUserInfo(e){let{name:t,about:r}=e;return fetch(this._userPath,{method:"PATCH",headers:this._baseHeaders,body:JSON.stringify({name:t,about:r})}).then((e=>this._checkResponse(e)))}setProfilePicture(e){return fetch(`${this._userPath}/avatar`,{method:"PATCH",headers:this._baseHeaders,body:JSON.stringify({avatar:e})}).then((e=>this._checkResponse(e)))}}(f),S=new class extends r{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector("#card-preview-image"),this._previewTitle=this._popupElement.querySelector("#card-preview-title")}open=e=>{let{name:t,link:r}=e;this._previewImage.src=r,this._previewImage.alt=`${t}`,this._previewTitle.textContent=`${t}`,super.open()}}("#card-preview-modal");S.setEventListeners();const v=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._container=t}renderItems(e){e.forEach((e=>(this._renderer(e),e)))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const t=q(e);v.addItem(t)}},n);b.getInitialCards().then((e=>{v.renderItems(e)})).catch((e=>{console.error(e)}));const y=new class{constructor(e,t,r){this._profileName=document.querySelector(e),this._profileJob=document.querySelector(t),this._profileAvatar=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}setUserAvatar(e){this._profileAvatar.src=e}}("#profile-name","#profile-about","#profile-avatar");b.getUserInfo().then((e=>{y.setUserInfo(e.name,e.about),y.setUserAvatar(e.avatar)})).catch((e=>{console.error(e)}));const k=new s("#profile-edit-modal",(e=>{k.loadingButtonState(),b.setUserInfo({name:e.name,about:e.job}).then((e=>{y.setUserInfo(e.name,e.about),k.close()})).catch((e=>{console.error(e)})).finally((()=>{k.resetButtonState()}))}),"Save");k.setEventListeners(),l.addEventListener("click",(()=>{const{name:e,job:t}=y.getUserInfo();d.value=e,u.value=t,k.open()}));const L=new s("#profile-picture-edit-modal",(()=>{const e=L.getInputValues();L.loadingButtonState(),b.setProfilePicture(e.url).then((e=>{y.setUserAvatar(e.avatar),L.close(),a.classList.add("modal__button_disabled")})).catch((e=>{console.error(e)})).finally((()=>{L.resetButtonState()}))}),"Save");L.setEventListeners(),i.addEventListener("click",(()=>{L.open()}));const C=new s("#profile-add-modal",(e=>{let{title:t,url:r}=e;C.loadingButtonState(),b.addNewCard({name:t,link:r}).then((e=>{const t=q(e);v.addItem(t),C.close(),m.classList.add("modal__button_disabled")})).catch((e=>{console.error(e)})).finally((()=>{C.resetButtonState()}))}),"Create");C.setEventListeners(),h.addEventListener("click",(()=>{C.open()}));const g=new class extends r{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector("#confirm-delete-form"),this._confirmBtn=this._popupElement.querySelector("#delete-card-btn")}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}loadingButtonState(){this._confirmBtn.textContent="Deleting..."}resetButtonState(){this._confirmBtn.textContent="Yes"}}("#card-delete-modal");function q(t){const r=new e(t,"#card-template",(()=>{S.open(t)}),g,(()=>{const e=r.getId();g.open(),g.setSubmitAction((()=>{g.loadingButtonState(),b.deleteCard(e).then((()=>{r.deleteHandler(),g.close()})).catch((e=>{console.error(e)})).finally((()=>{g.resetButtonState()}))}))}),(()=>{const e=r.getId();t.isLiked?b.removeCardLike(e).then((()=>{r.likeHandler()})).catch((e=>{console.error(e)})):b.addCardLike(e).then((()=>{r.likeHandler()})).catch((e=>{console.error(e)}))}));return r.getNewCard()}g.setEventListeners();const B=new t(E,c),I=new t(E,p),w=new t(E,o);B.enableValidation(),I.enableValidation(),w.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,